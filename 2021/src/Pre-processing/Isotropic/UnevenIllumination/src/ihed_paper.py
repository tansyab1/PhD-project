# -*- coding: utf-8 -*-
"""IHED.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KqU2WLfGKmhYbMu6j4X4gU56LZK2aM4e
"""

# ! mkdir /content/hyperkvasir/
# #Download the dataset
# ! unzip '/content/drive/MyDrive/Colab Notebooks/PhD-project/Dataset/hyperkvasir.zip' -d "/content/hyperkvasir/"


# ! mkdir /content/kvasir_capsule/
# #Download the dataset
# ! unzip '/content/drive/MyDrive/Colab Notebooks/PhD-project/Dataset/kvasircapsule.zip' -d "/content/kvasir_capsule/"

import numpy as np
import cv2
# import math
import csv
import os
# import matplotlib.pyplot as plt
# from skimage.util import random_noise
import glob
# import seaborn as sns
from tqdm import tqdm
# import matplotlib as mpl
# import pywt
from functools import reduce
# from google.colab.patches import cv2_imshow
stdss = []
names = []


def Average(lst):
    return reduce(lambda a, b: a + b, lst) / len(lst)


# Create a VideoCapture object and read from input file
# If the input is the camera, pass 0 instead of the video file name
clahe = cv2.createCLAHE(tileGridSize=(8, 8), clipLimit=2.0)
for file in tqdm(glob.glob("/home/nguyentansy/DATA/nguyentansy/PhD-work/Datasets/LVQ/uneven_illum/video5_*.avi")):
    cap = cv2.VideoCapture(file)
    names.append(os.path.basename(file))
    # Check if camera opened successfully
    if (cap.isOpened() is False):
        print("Error opening video stream or file")

    stds = []
    # Read until video is completed
    # while(cap.isOpened()):
    # Capture frame-by-frame
    ret, frame = cap.read()

    if ret is True:
        # Display the resulting frame
        img = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        median = cv2.medianBlur(img[:, :, 2], 201)
        ori = median.copy()
        diff = ori.copy()
        equ = cv2.equalizeHist(median)
        # equ = clahe.apply(median)
        res = np.absolute(equ-ori)

        # cv2.imshow('x', median)
        # cv2.imshow('eq', res)
        # plt.hist(img.ravel(), 256, [0, 256])
        # plt.show()
        for i in range(0, res.shape[0]):
            for j in range(0, res.shape[1]):
                diff[i][j] = np.maximum(ori[i][j], equ[i][j])-np.minimum(ori[i][j], equ[i][j])
        # diff = res
        mean = np.mean(diff)
        print(os.path.basename(file))
        print(mean)
        # dot = np.mean(ori)
        # stds.append(std*dot/255)
        # Press Q on keyboard to  exit
        # if cv2.waitKey(25) & 0xFF == ord('q'):
        #     break
        cv2.imwrite('/home/nguyentansy/DATA/PhD-work/PhD-project/2021/src/Pre-processing/Isotropic/UnevenIllumination/src/img_ppt/ihed/test_paper/' +
                    "diff"+os.path.basename(file)+".png", diff)
        # cv2.imwrite('/home/nguyentansy/DATA/PhD-work/PhD-project/2021/src/Pre-processing/Isotropic/UnevenIllumination/src/img_ppt/ihed/paper/' +
        #             "ori"+os.path.basename(file)+".png", frame)
        # cv2.imwrite('/home/nguyentansy/DATA/PhD-work/PhD-project/2021/src/Pre-processing/Isotropic/UnevenIllumination/src/img_ppt/ihed/paper/' +
        #             "hsv"+os.path.basename(file)+".png", img[:, :, 2])

        # cv2.imwrite('/home/nguyentansy/DATA/PhD-work/PhD-project/2021/src/Pre-processing/Isotropic/UnevenIllumination/src/img_ppt/ihed/paper/' +
        #             "equal"+os.path.basename(file)+".png", equ)
        # cv2.imwrite('/home/nguyentansy/DATA/PhD-work/PhD-project/2021/src/Pre-processing/Isotropic/UnevenIllumination/src/img_ppt/ihed/paper/' +
        #             "median"+os.path.basename(file)+".png", ori)

        # Break the loop
    #     else:
    #         break
    # stdss.append(Average(stds))

# with open('./ihed_AHE.csv', 'w') as f:
#     writer = csv.writer(f, delimiter='\t')
#     writer.writerows(zip(names, stdss))
